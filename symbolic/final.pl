l([1093938.8251696657, 87.74828696489334, 2.368167655467987, 2.3231168675422667, 2.3097170615196227, 2.3036655735969545, 2.307349543571472, 2.305115826129913, 2.303272397518158, 2.3025184321403502, 2.3028916049003603, 2.303914408683777, 2.3027667236328124, 2.303954164981842, 2.3054053378105164, 2.304164171218872, 2.3031961131095886, 2.3026777935028075, 2.3041194009780885, 2.3021592688560486]).
sl([1093938.8251696657, 656398.3944165853, 393839.9839170134, 236304.91959695503, 141783.8756449976, 85071.246853228, 51043.67105175423, 30627.124677382988, 18377.1961153888, 11027.238676606135, 6617.264362605641, 3971.2801833268577, 2383.6892166855678, 1431.1351116773335, 859.6032291415243, 516.683603153402, 310.93144033728504, 187.47993531977212, 113.40960895225452, 68.96662907889512]).
a([0.09300000220537186, 0.09620000272989274, 0.09852000087499618, 0.09791200166940689, 0.10514719966650009, 0.10788832118272781, 0.10273299223279952, 0.10203979674634933, 0.10202387728487014, 0.10681432639476394, 0.10768859478781662, 0.10421315665811325, 0.10652789375644936, 0.10871673763669737, 0.10723004127071624, 0.11033802559689476, 0.11100281674096461, 0.11140169142740652, 0.11164101623927167, 0.10658460952898628]).
sa([0.093, 0.101, 0.102, 0.097, 0.116, 0.112, 0.095, 0.101, 0.102, 0.114, 0.109, 0.099, 0.11, 0.112, 0.105, 0.115, 0.112, 0.112, 0.112, 0.099]).
vl([578.096531677246, 2.360164233048757, 2.3168906490008037, 2.309128971894582, 2.3062191645304364, 2.309990203380585, 2.3111131032307943, 2.308383349577586, 2.3057074507077533, 2.3070442199707033, 2.305378504594167, 2.3073418537775674, 2.3114912509918213, 2.3086509386698406, 2.307745889822642, 2.3148568511009215, 2.3101306796073913, 2.309131209055583, 2.3088180740674336, 2.3089861710866293]).
va([0.12666667, 0.093333334, 0.096666664, 0.11666667, 0.095, 0.07666667, 0.11666667, 0.095, 0.095, 0.07666667, 0.11833333, 0.11666667, 0.07666667, 0.07666667, 0.11833333, 0.07666667, 0.07666667, 0.07666667, 0.07666667, 0.11666667]).

0.99::eve.
action(reg_l2,overfitting) :- eve, problem(overfitting).
action(decr_lr,inc_loss) :- eve, problem(inc_loss).
0.4::action(inc_dropout,overfitting):- problem(overfitting).
0.6::action(data_augmentation,overfitting):- problem(overfitting).
0.3::action(decr_lr,underfitting):- problem(underfitting).
0.5::action(inc_neurons,underfitting):- problem(underfitting).
0.85::action(inc_batch_size,floating_loss):- problem(floating_loss).
0.15::action(decr_lr,floating_loss):- problem(floating_loss).

% DIAGNOSIS SECTION ----------------------------------------------------------------------------------------------------
:- use_module(library(lists)).

% UTILITY
abs2(X,Y) :- Y is abs(X).
isclose(X,Y,W) :- D is X - Y, abs2(D,D1), D1 =< W.
add_to_UpList([_],0).
add_to_UpList([H|[H1|T]], U) :- add_to_UpList([H1|T], U1),
    (   H =< H1 ->   U is U1+1
    ;   U is U1+0
    ).


add_to_DownList([_],0).
add_to_DownList([H|[H1|T]], U) :- add_to_DownList([H1|T], U1),
    (   H > H1 -> U is U1+1
    ;   U is U1+0
    ).

% ANALYSIS
gap_tr_te_acc :- a(A), va(VA), last(A,LTA), last(VA,ScoreA),
                Res is LTA - ScoreA, abs2(Res,Res1), Res1 > 0.2.
gap_tr_te_loss :- l(L), vl(VL), last(L,LTL), last(VL,ScoreL),
                Res is LTL - ScoreL, abs2(Res,Res1), Res1 > 0.2.
low_acc :- a(A), last(A,LTA),
                Res is LTA - 1.0, abs2(Res,Res1), Res1 > 0.37.
high_loss :- l(L), last(L,LTL), isclose(LTL,0,1.7).
growing_loss_trend :- add_to_UpList(sl,Usl), length(sl,Length_u), G is (Usl*100)/Length_u, G > 50.
up_down_acc :- add_to_UpList(sa,Usa), add_to_DownList(sa,Dsa), isclose(Usa,Dsa,150), Usa > 0, Dsa > 0.
up_down_loss :- add_to_UpList(sl,Usl), add_to_DownList(sl,Dsl), isclose(Usl,Dsl,150), Usl > 0, Dsl > 0.

% POSSIBLE PROBLEMS
problem(overfitting) :- gap_tr_te_acc; gap_tr_te_loss.
problem(underfitting) :- low_acc; high_loss.
problem(inc_loss) :- growing_loss_trend.
problem(floating_loss) :- up_down_loss.

% QUERY ----------------------------------------------------------------------------------------------------------------
query(action(_,_)).